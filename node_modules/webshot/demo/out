diff --git a/README.md b/README.md
index 686a1fc..c5655f0 100644
--- a/README.md
+++ b/README.md
@@ -115,6 +115,12 @@ An optional `options` object can be passed as the third parameter in a call to w
       <td>If streaming is used, this designates the file format of the streamed rendering. Possible values are 
       'png', 'jpg', and 'jpeg'.
       </td> 
+    </tr> 
+    <tr>
+      <th>renderDelay</th>
+      <td>0</td>
+      <td>Number of milliseconds to wait after a page loads before taking the screenshot.
+      </td> 
     </tr>
   </tbody>
 </table>
diff --git a/lib/webshot.js b/lib/webshot.js
index 0ca6512..62c9cb2 100644
--- a/lib/webshot.js
+++ b/lib/webshot.js
@@ -19,6 +19,7 @@ var defaults = {
 , phantomPath: 'phantomjs'
 , userAgent: ''
 , streamType: 'png'
+, renderDelay: 0
 };
 
 module.exports = function() {
diff --git a/lib/webshot.phantom.js b/lib/webshot.phantom.js
index 0499228..c4aa91b 100644
--- a/lib/webshot.phantom.js
+++ b/lib/webshot.phantom.js
@@ -12,6 +12,7 @@ var args = {};
 , 'userAgent'
 , 'script'
 , 'streamType'
+, 'renderDelay'
 ].forEach(function(name, i) {
   args[name] = system.args[i + 1];
 });
@@ -35,61 +36,65 @@ page.open(args.site, function(status) {
     return;
   }
 
-  // Determine the page's dimensions
-  var pageDimensions = page.evaluate(function() {
-    return {
-      width: Math.max( 
-        document.body.offsetWidth
-      , document.body.scrollWidth
-      , document.documentElement.clientWidth
-      , document.documentElement.scrollWidth
-      , document.documentElement.offsetWidth
-      )
-    , height: Math.max(
-        document.body.offsetHeight
-      , document.body.scrollHeight
-      , document.documentElement.clientHeight
-      , document.documentElement.scrollHeight
-      , document.documentElement.offsetHeight
-      )
-    };
-  });
+  // Wait `args.renderDelay` seconds for the page's JS to kick in
+  window.setTimeout(function () {
+
+    // Determine the page's dimensions
+    var pageDimensions = page.evaluate(function() {
+      return {
+        width: Math.max( 
+          document.body.offsetWidth
+        , document.body.scrollWidth
+        , document.documentElement.clientWidth
+        , document.documentElement.scrollWidth
+        , document.documentElement.offsetWidth
+        )
+      , height: Math.max(
+          document.body.offsetHeight
+        , document.body.scrollHeight
+        , document.documentElement.clientHeight
+        , document.documentElement.scrollHeight
+        , document.documentElement.offsetHeight
+        )
+      };
+    });
 
-  /*
-   * Given a shotSize dimension, return the actual number of pixels in the 
-   * dimension that phantom should render.
-   *
-   * @param (String) dimension
-   * @param (String or Number) value
-   */
-  var pixelCount = function(dimension, value) {
-    return {
-      window: args[{
-        width: 'windowWidth'
-      , height: 'windowHeight'
-      }[dimension]]
-    , all: pageDimensions[dimension]
-    }[value] || value
-  };
+    /*
+     * Given a shotSize dimension, return the actual number of pixels in the 
+     * dimension that phantom should render.
+     *
+     * @param (String) dimension
+     * @param (String or Number) value
+     */
+    var pixelCount = function(dimension, value) {
+      return {
+        window: args[{
+          width: 'screenWidth'
+        , height: 'screenHeight'
+        }[dimension]]
+      , all: pageDimensions[dimension]
+      }[value] || value
+    };
 
-  // Set the rectangle of the page to render
-  page.clipRect = {
-    top: 0
-  , left: 0
-  , width: pixelCount('width', args.shotWidth)
-  , height: pixelCount('height', args.shotHeight)
-  };
+    // Set the rectangle of the page to render
+    page.clipRect = {
+      top: 0
+    , left: 0
+    , width: pixelCount('width', args.shotWidth)
+    , height: pixelCount('height', args.shotHeight)
+    };
 
-  // Execute the user's script
-  page.evaluate(eval('('+args.script+')'));
+    // Execute the user's script
+    page.evaluate(eval('('+args.script+')'));
 
-  // Render, clean up, and exit
-  if (args.path) {
-    page.render(args.path);
-  } else {
-    console.log(page.renderBase64(args.streamType));
-  }
+    // Render, clean up, and exit
+    if (args.path) {
+      page.render(args.path);
+    } else {
+      console.log(page.renderBase64(args.streamType));
+    }
 
-  page.close();
-  phantom.exit(0);
+    page.close();
+    phantom.exit(0);
+  }, args.renderDelay);
 });
diff --git a/test/tests.js b/test/tests.js
index 6f1be0b..feb5723 100644
--- a/test/tests.js
+++ b/test/tests.js
@@ -161,7 +161,8 @@ describe('Handling screenshot dimension options', function() {
 });
 
 describe('Passing errors for bad input', function() {
-
+  this.timeout(6000);
+  
   it('Passes an error if an invalid extension is given', function(done) {
 
     webshot('betabeat.com', 'output.xyz', function(err) {
